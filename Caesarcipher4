import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

public class Caesarcipher4
{

	public static void main(String[] args) throws IOException 
	{
		Scanner scan= new Scanner(System.in);
		String fileName;
		boolean encrypt=true; //true=enc, false=dec
		boolean crack=false;
		int shiftAmount;
		String stringed;
		System.out.print("\nWould you like to encrypt,decrypt,or crack a file?: ");
		String encryptchoice= scan.nextLine();
		
			if(encryptchoice.equals("encrypt"))
			{
			encrypt=true;
			System.out.println("What algorithm would you like to use? (c for caesar or p for permutation): ");
			String alg = scan.nextLine();
				if(alg.equals("p"))
				{
					char perm[]=	{'u','l','b','m','k','t','q','d','v','e','r','j','h','g','z','c','y','o','w','i','x','s','n','a','f','p'};
				System.out.println("This will be the permuted alphabet: ");
				for(int c=0;c< perm.length;c++)
					{
						System.out.print(perm[c]);
					}
				System.out.print("\nEnter a filename to encrypt: ");
				fileName= scan.nextLine();
				System.out.println(perm_cipher(fileName,encrypt,perm));
				String partOfFile= fileName.substring(0, fileName.length()-4);
				System.out.println("Result written to "+partOfFile+"_ENC.txt");
				}
				else
				{
					System.out.print("\nHow many places should the alphabet be shifted?: ");
					shiftAmount= scan.nextInt();
					scan.nextLine();
					System.out.print("\nEnter a filename to encrypt: ");
					fileName= scan.nextLine();
					System.out.println(caesar_cipher(fileName,encrypt,crack,shiftAmount));
					String partOfFile= fileName.substring(0, fileName.length()-4);
					System.out.println("Result written to "+partOfFile+"_ENC.txt");
				}
			}
			else if(encryptchoice.equals("decrypt"))
			{
			encrypt=false;
			System.out.println("What algorithm would you like to use? (c for caesar or p for permutation): ");
			String alg = scan.nextLine();
				if(alg.equals("p"))
				{
					System.out.println("Enter the permuted alphabet: ");
					String permute = scan.nextLine();
					char perm[]= new char[26];
						for(int b=0;b<permute.length()-1;b++)
						{
							perm[b]= permute.charAt(b);
							
						}
						System.out.print("\nEnter a filename to decrypt: ");
						fileName= scan.nextLine();
						System.out.println(perm_cipher(fileName,encrypt,perm));
						String partOfFile= fileName.substring(0, fileName.length()-4);
						System.out.println("Result written to "+partOfFile+"_DEC.txt");
				}
				else
				{
					System.out.print("\nHow many places should the alphabet be shifted?: ");
					shiftAmount= scan.nextInt();
					scan.nextLine();
					System.out.print("\nEnter a filename to decrypt: ");
					fileName= scan.nextLine();
					System.out.println(caesar_cipher(fileName,encrypt,crack,shiftAmount));
					String partOfFile= fileName.substring(0, fileName.length()-4);
					System.out.println("Result written to "+partOfFile+"_DEC.txt");
				}
			}
			else if(encryptchoice.equals("crack"))
			{
				encrypt=false;
				crack=true;
				System.out.print("\nEnter a filename to crack: ");
				fileName= scan.nextLine();
				for(int shift=0; shift<26;shift++)
				{
					System.out.println(caesar_cipher(fileName,encrypt,crack,shift));
					System.out.println("Is this correct? Y/N: ");
					String choice= scan.nextLine();
					if(choice.equals("Y"))
					{
						String partOfFile= fileName.substring(0, fileName.length()-4);
						System.out.println("Result written to "+partOfFile+"_DEC.txt");
						break;
					}
					else
						continue;
						
				}
				
			}
		
			
		
		
		
		
		
	}

	
	public static String caesar_cipher(String fileName, 
	boolean encrypt,boolean cracked, int shiftAmount) throws IOException
{
		char encryptedchar;
	String stringed="";
		if(encrypt==true && cracked==false)
		{
			Scanner inputFile= new Scanner(new File(fileName)); 
			
			String partOfFile= fileName.substring(0, fileName.length()-4);
			PrintWriter outputfile= new PrintWriter(partOfFile+"_ENC.txt");
			
			
			while (inputFile.hasNext())

				
					{ 
				
					String line = inputFile.nextLine(); 
					char[] linechars= new char[line.length()];
					
					for(int h=0; h<line.length();h++)
					{
						linechars[h]= line.charAt(h);
					}
					
					for(int i=0; i<line.length();i++)
					{
						
						char regularchar=linechars[i];
						
						if(regularchar<65)
						{
							stringed+=""+regularchar;
							continue;
						}
						if(regularchar>122)
						{
							stringed+=""+regularchar;
							continue;
						}
						if(regularchar<97&&regularchar>90)
						{
							stringed+=""+regularchar;
							continue;
						}
						 encryptedchar = (char) ((char) (regularchar-26)+26+shiftAmount);
					
						if(encryptedchar<65 )
						{
							encryptedchar=(char) (regularchar+(26-Math.abs(shiftAmount)));
							
						}
						if(encryptedchar>122)
						{
							encryptedchar=regularchar;
						}
						if(encryptedchar<97&&encryptedchar>90)
						{
							encryptedchar=(char) (regularchar+(26-Math.abs(shiftAmount)));
						
						}
						
						outputfile.print(encryptedchar);
						stringed+=""+encryptedchar;
								 
					}
					outputfile.println("\n");
					System.out.println("");

					}
			
			outputfile.close();
			inputFile.close();
			
		}
		
		
		if(encrypt==false & cracked == false)
		{
			
			Scanner inputFile= new Scanner(new File(fileName)); 
			
			String partOfFile= fileName.substring(0, fileName.length()-4);
			PrintWriter outputfile= new PrintWriter(partOfFile+"_DEC.txt");
			
			
			while (inputFile.hasNext())

				
					{ 

					String line = inputFile.nextLine(); 
					char[] linechars= new char[line.length()];
					
					for(int h=0; h<line.length();h++)
					{
						linechars[h]= line.charAt(h);
					}
					
					for(int i=0; i<line.length();i++)
					{
						
						
						
						char regularchar=linechars[i];
						//char decryptedchar= (char) (regularchar+((shiftAmount%regularchar)));
						if(regularchar<65)
						{
							stringed+=""+regularchar;
							continue;
						}
						if(regularchar>122)
						{
							stringed+=""+regularchar;
							continue;
						}
						if(regularchar<97&&regularchar>90)
						{
							stringed+=""+regularchar;
							continue;
						}
						
						char decryptedchar = (char) ((char) (regularchar+26)-26-shiftAmount);
						
						if(decryptedchar<65)
						{
							decryptedchar=(char) (decryptedchar-(26-shiftAmount));	
							
						}
						if(decryptedchar>122)
						{
							decryptedchar=(char) (decryptedchar-(26-shiftAmount));
							
						}
						if(decryptedchar<97&&decryptedchar>90)
						{
							decryptedchar=(char) (decryptedchar-(26-shiftAmount));
							
						}
						
						outputfile.print(decryptedchar);
						stringed+=""+decryptedchar;
								 
					}
					outputfile.println("\n");
					System.out.println("");

					}
			outputfile.close();
			inputFile.close();
			
		}
		
		if(cracked==true)
		{
			Scanner inputFile= new Scanner(new File(fileName)); 
			
			String partOfFile= fileName.substring(0, fileName.length()-4);
			PrintWriter outputfile= new PrintWriter(partOfFile+"_DEC.txt");
			
			
			while (inputFile.hasNext())

				
					{ 

					String line = inputFile.nextLine(); 
					char[] linechars= new char[line.length()];
					
					for(int h=0; h<line.length();h++)
					{
						linechars[h]= line.charAt(h);
					}
					
					for(int i=0; i<line.length();i++)
					{
						
						
						
						char regularchar=linechars[i];
						//char decryptedchar= (char) (regularchar+((shiftAmount%regularchar)));
						if(regularchar<65)
						{
							stringed+=""+regularchar;
							continue;
						}
						if(regularchar>122)
						{
							stringed+=""+regularchar;
							continue;
						}
						if(regularchar<97&&regularchar>90)
						{
							stringed+=""+regularchar;
							continue;
						}
						
						char decryptedchar = (char) ((char) (regularchar+26)-26-shiftAmount);
						
						if(decryptedchar<65)
						{
							decryptedchar=(char) (decryptedchar-(26-shiftAmount));	
							
						}
						if(decryptedchar>122)
						{
							decryptedchar=(char) (decryptedchar-(26-shiftAmount));
							
						}
						if(decryptedchar<97&&decryptedchar>90)
						{
							decryptedchar=(char) (decryptedchar-(26-shiftAmount));
							
						}
						
						outputfile.print(decryptedchar);
						stringed+=""+decryptedchar;
								 
					}
					outputfile.println("\n");
					System.out.println("");

					}
			
			outputfile.close();
			inputFile.close();
			stringed= stringed.substring(100);
		}
		
		return stringed;	
		
		
		
		
}
	
	
public static String perm_cipher(String fileName, boolean encrypt, char[] perm) throws FileNotFoundException
{
String stringprint = "";
String decstringprint = "";
	if(encrypt==true)
	{
	Scanner inputFile= new Scanner(new File(fileName)); 
	
	String partOfFile= fileName.substring(0, fileName.length()-4);
	PrintWriter outputfile= new PrintWriter(partOfFile+"_ENC.txt");
	
	
		while (inputFile.hasNext())
		{
			char encryptedchar = 'a';
		
			
				
			String line = inputFile.nextLine(); 
			char[] linechars= new char[line.length()];
			
			for(int h=0; h<line.length();h++)
			{
				linechars[h]= line.charAt(h);
			}
			
			for(int i=0; i<line.length();i++)
			{
				
				char regularchar= linechars[i];
				
				
				if(isLower(regularchar)==true)
				{
					 encryptedchar=perm[Math.abs('a'-regularchar)];
				}
				if(isUpper(regularchar)==true)
				{
					encryptedchar=perm[Math.abs('A'-regularchar)];
					encryptedchar=(char) (encryptedchar-('z'-regularchar)+6);
				}
				if(isUpper(regularchar)==false && isLower(regularchar)==false )
				{
					encryptedchar=regularchar;
				}
				
				outputfile.print(encryptedchar);
				stringprint+=""+encryptedchar;
						 
			 }
			
			outputfile.println("\n");
			

			
	
	
	
	
	}
		outputfile.close();
		inputFile.close();
		
		
	}

else
	{
		
		if(encrypt==false)
		{
		Scanner inputFile= new Scanner(new File(fileName)); 
		
		String partOfFile= fileName.substring(0, fileName.length()-4);
		PrintWriter outputfile= new PrintWriter(partOfFile+"_ENC.txt");
		
		
			while (inputFile.hasNext())
			{
				char decryptedchar = 'a';
			
				
					
				String line = inputFile.nextLine(); 
				char[] linechars= new char[line.length()];
				
				for(int h=0; h<line.length();h++)
				{
					linechars[h]= line.charAt(h);
				}
				
				for(int i=0; i<line.length();i++)
				{
					
					char regularchar= linechars[i];
					
					
					if(isLower(regularchar)==true)
					{
						 decryptedchar=perm[Math.abs('a'-regularchar)];
					}
					if(isUpper(regularchar)==true)
					{
						decryptedchar= perm[Math.abs('A'-regularchar)];
						decryptedchar=(char) (decryptedchar- ('z'-regularchar)+6);
							
					}
					if(isUpper(regularchar)==false && isLower(regularchar)==false )
					{
						decryptedchar=regularchar;
					}
					
					outputfile.print(decryptedchar);
					decstringprint+=""+decryptedchar;
							 
				 }
				
				outputfile.println("\n");
		
		
		}
			outputfile.close();
			inputFile.close();
			
		}	
	}
	
	
	if(encrypt=true)
	return stringprint;
	
	else
		return decstringprint;
	
}











public static boolean isLower(char c)
{
	return c>= 'a' && c<= 'z';
}
public static boolean isUpper(char c)
{
	return c>= 'A' && c<= 'Z';
}	
	
	
	
}
